{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Prediction Stroke App","text":"<p>Bienvenue dans la documentation du projet Prediction Stroke App.</p> <p>Cette application permet de pr\u00e9dire le risque d\u2019AVC (stroke) \u00e0 partir de donn\u00e9es patients. Elle contient deux parties principales : - Une API Python (<code>stroke_api</code>) pour manipuler les donn\u00e9es et r\u00e9aliser les pr\u00e9dictions. - Une Streamlit App (<code>streamlit_app</code>) pour visualiser et interagir avec les donn\u00e9es.</p> <p>Vous trouverez \u00e9galement la documentation des modules utilitaires et des donn\u00e9es utilis\u00e9es dans le projet.</p>"},{"location":"donnees/","title":"Donn\u00e9es","text":"<p>Le projet utilise les fichiers suivants situ\u00e9s dans le dossier <code>data/</code> :</p> <ul> <li><code>stroke_data.parquet</code> : fichier principal de donn\u00e9es stroke.</li> <li><code>healthcare-dataset-stroke-data.csv</code> : dataset brut utilis\u00e9 pour l\u2019analyse initiale.</li> </ul> <p>Ces fichiers sont utilis\u00e9s par les modules de l\u2019API et la Streamlit App pour les visualisations et les calculs statistiques.</p>"},{"location":"api/","title":"API Python","text":"<p>Cette section d\u00e9crit l\u2019API Python du projet, contenue dans le dossier <code>stroke_api/</code>. Elle permet d\u2019acc\u00e9der aux donn\u00e9es et aux fonctions de pr\u00e9diction.</p> <p>Les modules document\u00e9s ci-dessous peuvent \u00eatre utilis\u00e9s pour int\u00e9grer l\u2019API dans d\u2019autres applications Python.</p>"},{"location":"api/api/","title":"Modules API","text":""},{"location":"api/api/#apipy","title":"api.py","text":""},{"location":"api/api/#stroke_api.api.get_patient_by_id","title":"<code>get_patient_by_id(patient_id)</code>","text":"<p>R\u00e9cup\u00e8re un patient selon son ID.</p> <p>Parameters:</p> Name Type Description Default <code>patient_id</code> <code>int</code> <p>Identifiant unique du patient.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionnaire repr\u00e9sentant le patient correspondant \u00e0 l'ID.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Erreur 404 si aucun patient avec l'ID fourni n'est trouv\u00e9.</p> <p>Remarques : - Retourne le premier (et unique) enregistrement correspondant \u00e0 l'ID.</p> Source code in <code>stroke_api/api.py</code> <pre><code>@router.get(\"/patients/{patient_id}\")\ndef get_patient_by_id(patient_id: int) -&gt; dict:\n    \"\"\"\n    R\u00e9cup\u00e8re un patient selon son ID.\n\n    Args:\n        patient_id (int): Identifiant unique du patient.\n\n    Returns:\n        dict: Dictionnaire repr\u00e9sentant le patient correspondant \u00e0 l'ID.\n\n    Raises:\n        HTTPException: Erreur 404 si aucun patient avec l'ID fourni n'est trouv\u00e9.\n\n    Remarques :\n    - Retourne le premier (et unique) enregistrement correspondant \u00e0 l'ID.\n    \"\"\"\n\n    patient = stroke_data_df[stroke_data_df[\"id\"] == patient_id]\n    if patient.empty:\n        raise HTTPException(status_code=404, detail=\"Patient non trouv\u00e9\")\n    return patient.to_dict(\"records\")[0]\n</code></pre>"},{"location":"api/api/#stroke_api.api.get_patients","title":"<code>get_patients(gender=None, stroke=None, min_age=None, max_age=None)</code>","text":"<p>R\u00e9cup\u00e8re la liste des patients filtr\u00e9e selon les crit\u00e8res fournis.</p> <p>Parameters:</p> Name Type Description Default <code>gender</code> <code>str</code> <p>Filtrer par genre (\"Male\", \"Female\", etc.).</p> <code>None</code> <code>stroke</code> <code>int</code> <p>Filtrer par AVC (1 pour AVC, 0 sinon).</p> <code>None</code> <code>min_age</code> <code>int</code> <p>\u00c2ge minimum inclus pour le filtre.</p> <code>None</code> <code>max_age</code> <code>int</code> <p>\u00c2ge maximum inclus pour le filtre.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>list of dict or dict: Liste des patients correspondant aux filtres,                   ou message si aucun patient n'est trouv\u00e9.</p> <p>Remarques : - Utilise la fonction <code>filter_patient</code> pour appliquer les filtres.</p> Source code in <code>stroke_api/api.py</code> <pre><code>@router.get(\"/patients/\")\ndef get_patients(\n    gender: str = None,\n    stroke: int = None,\n    min_age: int = None,\n    max_age: int = None,\n) -&gt; dict:\n    \"\"\"\n    R\u00e9cup\u00e8re la liste des patients filtr\u00e9e selon les crit\u00e8res fournis.\n\n    Args:\n        gender (str, optional): Filtrer par genre (\"Male\", \"Female\", etc.).\n        stroke (int, optional): Filtrer par AVC (1 pour AVC, 0 sinon).\n        min_age (int, optional): \u00c2ge minimum inclus pour le filtre.\n        max_age (int, optional): \u00c2ge maximum inclus pour le filtre.\n\n    Returns:\n        list of dict or dict: Liste des patients correspondant aux filtres,\n                              ou message si aucun patient n'est trouv\u00e9.\n\n    Remarques :\n    - Utilise la fonction `filter_patient` pour appliquer les filtres.\n    \"\"\"\n\n    filtered = filter_patient(\n        gender=gender,\n        stroke=stroke,\n        min_age=min_age,\n        max_age=max_age,\n    )\n    if not filtered:\n        return {\"message\": \"Aucun patient trouv\u00e9.\"}\n    return filtered\n</code></pre>"},{"location":"api/api/#stroke_api.api.get_stats","title":"<code>get_stats()</code>","text":"<p>R\u00e9cup\u00e8re les statistiques globales des patients.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionnaire contenant les statistiques suivantes : - total_patients (int): Nombre total de patients - stroke_true (int): Nombre de patients ayant eu un AVC - stroke_false (int): Nombre de patients n'ayant pas eu d'AVC - gender_distribution (dict): R\u00e9partition des patients par genre - average_age (float): \u00c2ge moyen des patients, arrondi \u00e0 2 d\u00e9cimales</p> <p>Remarques : - Les calculs sont r\u00e9alis\u00e9s sur l'ensemble des patients pr\u00e9sents dans <code>stroke_data_df</code>.</p> Source code in <code>stroke_api/api.py</code> <pre><code>@router.get(\"/stats/\")\ndef get_stats() -&gt; dict:\n    \"\"\"\n    R\u00e9cup\u00e8re les statistiques globales des patients.\n\n    Returns:\n        dict: Dictionnaire contenant les statistiques suivantes :\n            - total_patients (int): Nombre total de patients\n            - stroke_true (int): Nombre de patients ayant eu un AVC\n            - stroke_false (int): Nombre de patients n'ayant pas eu d'AVC\n            - gender_distribution (dict): R\u00e9partition des patients par genre\n            - average_age (float): \u00c2ge moyen des patients, arrondi \u00e0 2 d\u00e9cimales\n\n    Remarques :\n    - Les calculs sont r\u00e9alis\u00e9s sur l'ensemble des patients pr\u00e9sents dans `stroke_data_df`.\n    \"\"\"\n\n    total = len(stroke_data_df)\n    stroke_true = int(stroke_data_df[\"stroke\"].sum())\n    stroke_false = total - stroke_true\n    gender_count = stroke_data_df[\"gender\"].value_counts().to_dict()\n    avg_age = float(stroke_data_df[\"age\"].mean())\n\n    return {\n        \"total_patients\": total,\n        \"stroke_true\": stroke_true,\n        \"stroke_false\": stroke_false,\n        \"gender_distribution\": gender_count,\n        \"average_age\": round(avg_age, 2),\n    }\n</code></pre>"},{"location":"api/api/#stroke_api.api.read_root","title":"<code>read_root()</code>","text":"<p>Route racine de l'API.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Message de bienvenue de l'API Stroke Prediction.</p> Source code in <code>stroke_api/api.py</code> <pre><code>@router.get(\"/\")\ndef read_root() -&gt; dict:\n    \"\"\"\n    Route racine de l'API.\n\n    Returns:\n        dict: Message de bienvenue de l'API Stroke Prediction.\n    \"\"\"\n\n    return {\"message\": \"Bienvenue sur l'API Stroke Prediction !\"}\n</code></pre>"},{"location":"api/api/#mainpy","title":"main.py","text":""},{"location":"api/filters/","title":"Module Filters","text":"<p>Documentation des fonctions de filtrage des patients.</p>"},{"location":"api/filters/#stroke_api.filters.filter_patient","title":"<code>filter_patient(gender=None, stroke=None, min_age=None, max_age=None)</code>","text":"<p>Filtre les patients selon plusieurs crit\u00e8res et retourne la liste des r\u00e9sultats.</p> <p>Parameters:</p> Name Type Description Default <code>gender</code> <code>str</code> <p>Genre \u00e0 filtrer (\"Male\", \"Female\", etc.).</p> <code>None</code> <code>stroke</code> <code>int</code> <p>Filtre AVC (1 pour AVC, 0 sinon).</p> <code>None</code> <code>min_age</code> <code>int</code> <p>\u00c2ge minimum inclus pour le filtre.</p> <code>None</code> <code>max_age</code> <code>int</code> <p>\u00c2ge maximum inclus pour le filtre.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list of dict: Liste de dictionnaires repr\u00e9sentant les patients filtr\u00e9s,           chaque dictionnaire correspondant \u00e0 une ligne du DataFrame.</p> <p>Remarques : - Les filtres sont appliqu\u00e9s uniquement si les valeurs correspondantes sont fournies. - Utilise les fonctions <code>filtred_gender</code>, <code>filtred_stroke</code> et <code>filtered_age_range</code>. - Le DataFrame original <code>stroke_data_df</code> n'est jamais modifi\u00e9.</p> Source code in <code>stroke_api/filters.py</code> <pre><code>def filter_patient(\n    gender: Optional[str] = None,\n    stroke: Optional[int] = None,\n    min_age: Optional[int] = None,\n    max_age: Optional[int] = None,\n) -&gt; list[dict]:\n    \"\"\"\n    Filtre les patients selon plusieurs crit\u00e8res et retourne la liste des r\u00e9sultats.\n\n    Args:\n        gender (str, optional): Genre \u00e0 filtrer (\"Male\", \"Female\", etc.).\n        stroke (int, optional): Filtre AVC (1 pour AVC, 0 sinon).\n        min_age (int, optional): \u00c2ge minimum inclus pour le filtre.\n        max_age (int, optional): \u00c2ge maximum inclus pour le filtre.\n\n    Returns:\n        list of dict: Liste de dictionnaires repr\u00e9sentant les patients filtr\u00e9s,\n                      chaque dictionnaire correspondant \u00e0 une ligne du DataFrame.\n\n    Remarques :\n    - Les filtres sont appliqu\u00e9s uniquement si les valeurs correspondantes sont fournies.\n    - Utilise les fonctions `filtred_gender`, `filtred_stroke` et `filtered_age_range`.\n    - Le DataFrame original `stroke_data_df` n'est jamais modifi\u00e9.\n    \"\"\"\n\n    df = stroke_data_df.copy()\n\n    if gender is not None:\n        df = filtred_gender(df, gender)\n    if stroke is not None:\n        df = filtred_stroke(df, stroke)\n    if min_age is not None and max_age is not None:\n        df = filtered_age_range(df, min_age, max_age)\n\n    return df.to_dict(\"records\")\n</code></pre>"},{"location":"api/filters/#stroke_api.filters.filtered_age_range","title":"<code>filtered_age_range(df, min_age, max_age)</code>","text":"<p>Filtre un DataFrame pour ne conserver que les patients dont l'\u00e2ge se situe dans une plage donn\u00e9e.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame des patients.</p> required <code>min_age</code> <code>int</code> <p>\u00c2ge minimum inclus.</p> required <code>max_age</code> <code>int</code> <p>\u00c2ge maximum inclus.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame filtr\u00e9 contenant uniquement les patients           dont l'\u00e2ge est compris entre min_age et max_age.           Si la colonne 'age' n'existe pas, renvoie le DataFrame inchang\u00e9.</p> Source code in <code>stroke_api/filters.py</code> <pre><code>def filtered_age_range(df: pd.DataFrame, min_age: int, max_age: int) -&gt; pd.DataFrame:\n    \"\"\"\n    Filtre un DataFrame pour ne conserver que les patients dont l'\u00e2ge\n    se situe dans une plage donn\u00e9e.\n\n    Args:\n        df (pd.DataFrame): DataFrame des patients.\n        min_age (int): \u00c2ge minimum inclus.\n        max_age (int): \u00c2ge maximum inclus.\n\n    Returns:\n        pd.DataFrame: DataFrame filtr\u00e9 contenant uniquement les patients\n                      dont l'\u00e2ge est compris entre min_age et max_age.\n                      Si la colonne 'age' n'existe pas, renvoie le DataFrame inchang\u00e9.\n    \"\"\"\n\n    if \"age\" in df.columns:\n        mask = (df[\"age\"] &gt;= min_age) &amp; (df[\"age\"] &lt;= max_age)\n        return df.loc[mask].copy()\n    return df\n</code></pre>"},{"location":"api/filters/#stroke_api.filters.filtred_gender","title":"<code>filtred_gender(df, gender)</code>","text":"<p>Filtre un DataFrame selon la colonne 'gender'.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame des patients.</p> required <code>gender</code> <code>str</code> <p>Genre \u00e0 filtrer (\"Male\", \"Female\", etc.).</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame filtr\u00e9 contenant uniquement les lignes           correspondant au genre sp\u00e9cifi\u00e9. Si la colonne n'existe           pas, renvoie le DataFrame inchang\u00e9.</p> Source code in <code>stroke_api/filters.py</code> <pre><code>def filtred_gender(df: pd.DataFrame, gender: str) -&gt; pd.DataFrame:\n    \"\"\"\n    Filtre un DataFrame selon la colonne 'gender'.\n\n    Args:\n        df (pd.DataFrame): DataFrame des patients.\n        gender (str): Genre \u00e0 filtrer (\"Male\", \"Female\", etc.).\n\n    Returns:\n        pd.DataFrame: DataFrame filtr\u00e9 contenant uniquement les lignes\n                      correspondant au genre sp\u00e9cifi\u00e9. Si la colonne n'existe\n                      pas, renvoie le DataFrame inchang\u00e9.\n    \"\"\"\n    return (\n        df[df[\"gender\"].str.lower() == gender.lower()] if \"gender\" in df.columns else df\n    )\n</code></pre>"},{"location":"api/filters/#stroke_api.filters.filtred_stroke","title":"<code>filtred_stroke(df, stroke)</code>","text":"<p>Filtre un DataFrame selon la colonne 'stroke'.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame des patients.</p> required <code>stroke</code> <code>int</code> <p>Valeur du champ 'stroke' \u00e0 filtrer (1 pour AVC, 0 sinon).</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame filtr\u00e9 contenant uniquement les lignes avec           la valeur de 'stroke' sp\u00e9cifi\u00e9e. Si la colonne n'existe           pas, renvoie le DataFrame inchang\u00e9.</p> Source code in <code>stroke_api/filters.py</code> <pre><code>def filtred_stroke(df: pd.DataFrame, stroke: int) -&gt; pd.DataFrame:\n    \"\"\"\n    Filtre un DataFrame selon la colonne 'stroke'.\n\n    Args:\n        df (pd.DataFrame): DataFrame des patients.\n        stroke (int): Valeur du champ 'stroke' \u00e0 filtrer (1 pour AVC, 0 sinon).\n\n    Returns:\n        pd.DataFrame: DataFrame filtr\u00e9 contenant uniquement les lignes avec\n                      la valeur de 'stroke' sp\u00e9cifi\u00e9e. Si la colonne n'existe\n                      pas, renvoie le DataFrame inchang\u00e9.\n    \"\"\"\n\n    return df[df[\"stroke\"] == stroke] if \"stroke\" in df.columns else df\n</code></pre>"},{"location":"api/filters/#stroke_api.filters.get_stroke_data","title":"<code>get_stroke_data()</code>","text":"<p>Retourne une copie du DataFrame contenant les donn\u00e9es des patients.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame complet des patients, pr\u00eat \u00e0 \u00eatre utilis\u00e9           ou filtr\u00e9 sans modifier l'original.</p> Source code in <code>stroke_api/filters.py</code> <pre><code>def get_stroke_data() -&gt; pd.DataFrame:\n    \"\"\"\n    Retourne une copie du DataFrame contenant les donn\u00e9es des patients.\n\n    Returns:\n        pd.DataFrame: DataFrame complet des patients, pr\u00eat \u00e0 \u00eatre utilis\u00e9\n                      ou filtr\u00e9 sans modifier l'original.\n    \"\"\"\n    return stroke_data_df.copy()\n</code></pre>"},{"location":"streamlit/","title":"Streamlit App","text":"<p>Cette section d\u00e9crit la Streamlit App du projet.</p> <p>La Streamlit App permet de : - Visualiser les donn\u00e9es patients. - Consulter des statistiques. - Interagir avec les modules de visualisation.</p> <p>Les modules et utils utilis\u00e9s sont document\u00e9s dans les pages suivantes.</p>"},{"location":"streamlit/modules/","title":"Modules Streamlit","text":""},{"location":"streamlit/modules/#accueil","title":"Accueil","text":""},{"location":"streamlit/modules/#streamlit_app.modules.accueil.accueil","title":"<code>accueil()</code>","text":"<p>Affiche la page d'accueil de l'application Stroke Prediction.</p> <p>Fonctionnalit\u00e9s principales : - Affiche un en-t\u00eate de bienvenue. - Fournit un texte introductif expliquant l'objectif de l'application :     explorer les donn\u00e9es patients, visualiser les statistiques cl\u00e9s et comprendre     les facteurs associ\u00e9s aux AVC. - Propose un bouton \"Description des variables\" :     - Lorsqu'il est cliqu\u00e9, appelle la fonction <code>show_description()</code> pour afficher       les d\u00e9tails des variables des patients.</p> <p>Remarques : - La fonction ne prend pas d'arguments et ne retourne aucune valeur. - Elle repose sur Streamlit pour l'affichage interactif.</p> Source code in <code>streamlit_app/modules/accueil.py</code> <pre><code>def accueil():\n    \"\"\"\n    Affiche la page d'accueil de l'application Stroke Prediction.\n\n    Fonctionnalit\u00e9s principales :\n    - Affiche un en-t\u00eate de bienvenue.\n    - Fournit un texte introductif expliquant l'objectif de l'application :\n        explorer les donn\u00e9es patients, visualiser les statistiques cl\u00e9s et comprendre\n        les facteurs associ\u00e9s aux AVC.\n    - Propose un bouton \"Description des variables\" :\n        - Lorsqu'il est cliqu\u00e9, appelle la fonction `show_description()` pour afficher\n          les d\u00e9tails des variables des patients.\n\n    Remarques :\n    - La fonction ne prend pas d'arguments et ne retourne aucune valeur.\n    - Elle repose sur Streamlit pour l'affichage interactif.\n    \"\"\"\n\n    st.header(\"Bienvenue sur l'application Stroke Prediction\")\n    st.markdown(\n        \"Explorez les donn\u00e9es des patients, visualisez les statistiques cl\u00e9s et comprenez les facteurs associ\u00e9s aux AVC.\"\n    )\n    if st.button(\"Description des variables\"):\n        show_description()\n</code></pre>"},{"location":"streamlit/modules/#config","title":"Config","text":""},{"location":"streamlit/modules/#donnees","title":"Donn\u00e9es","text":""},{"location":"streamlit/modules/#streamlit_app.modules.donnees.donnees","title":"<code>donnees()</code>","text":"<p>Affiche et g\u00e8re l'interface de s\u00e9lection des donn\u00e9es patients dans l'application Streamlit.</p> <p>Fonctionnalit\u00e9s principales : - Affiche un en-t\u00eate \"Donn\u00e9es\". - Permet de filtrer les patients selon plusieurs crit\u00e8res :     - ID du patient (champ texte)     - Genre (\"Tous\", \"Male\", \"Female\")     - Pr\u00e9sence d'AVC (\"Tous\", \"Oui\", \"Non\")     - Tranche d'\u00e2ge (slider) - Bouton de r\u00e9initialisation (\"R\u00e9initialiser les filtres\") qui supprime les filtres et recharge la page. - Filtre les donn\u00e9es des patients \u00e0 partir de la fonction <code>filter_patient()</code> selon les crit\u00e8res s\u00e9lectionn\u00e9s. - Affiche les r\u00e9sultats filtr\u00e9s dans un tableau Streamlit (<code>st.dataframe</code>) et le nombre de patients trouv\u00e9s. - G\u00e8re les erreurs :     - ID patient non valide     - Aucun patient correspondant aux crit\u00e8res - Sauvegarde les r\u00e9sultats filtr\u00e9s dans <code>st.session_state[\"patients_data\"]</code> pour utilisation dans d'autres pages de l'application.</p> <p>Remarques : - Les filtres \"Tous\" correspondent \u00e0 l'absence de filtrage pour ce crit\u00e8re. - La fonction repose sur <code>st.session_state</code> pour conserver les s\u00e9lections entre les rechargements de la page.</p> Source code in <code>streamlit_app/modules/donnees.py</code> <pre><code>def donnees():\n    \"\"\"\n    Affiche et g\u00e8re l'interface de s\u00e9lection des donn\u00e9es patients dans l'application Streamlit.\n\n    Fonctionnalit\u00e9s principales :\n    - Affiche un en-t\u00eate \"Donn\u00e9es\".\n    - Permet de filtrer les patients selon plusieurs crit\u00e8res :\n        - ID du patient (champ texte)\n        - Genre (\"Tous\", \"Male\", \"Female\")\n        - Pr\u00e9sence d'AVC (\"Tous\", \"Oui\", \"Non\")\n        - Tranche d'\u00e2ge (slider)\n    - Bouton de r\u00e9initialisation (\"R\u00e9initialiser les filtres\") qui supprime les filtres et recharge la page.\n    - Filtre les donn\u00e9es des patients \u00e0 partir de la fonction `filter_patient()` selon les crit\u00e8res s\u00e9lectionn\u00e9s.\n    - Affiche les r\u00e9sultats filtr\u00e9s dans un tableau Streamlit (`st.dataframe`) et le nombre de patients trouv\u00e9s.\n    - G\u00e8re les erreurs :\n        - ID patient non valide\n        - Aucun patient correspondant aux crit\u00e8res\n    - Sauvegarde les r\u00e9sultats filtr\u00e9s dans `st.session_state[\"patients_data\"]` pour utilisation dans d'autres pages de l'application.\n\n    Remarques :\n    - Les filtres \"Tous\" correspondent \u00e0 l'absence de filtrage pour ce crit\u00e8re.\n    - La fonction repose sur `st.session_state` pour conserver les s\u00e9lections entre les rechargements de la page.\n    \"\"\"\n\n    st.header(\"Donn\u00e9es\")\n\n    # Bouton Reset\n    if st.button(\"R\u00e9initialiser les filtres\"):\n        for key in [\n            \"patient_id\",\n            \"selected_gender\",\n            \"selected_stroke\",\n            \"selected_age\",\n            \"patients_data\",\n        ]:\n            if key in st.session_state:\n                del st.session_state[key]\n        st.rerun()\n\n    # Widgets\n    patient_id = st.text_input(\n        \"ID de patient\",\n        value=st.session_state.get(\"patient_id\", \"\"),\n        key=\"patient_id\",\n        placeholder=\"Ex : 9032\",\n    )\n\n    col1, col2, col3 = st.columns(3)\n\n    selected_gender = col1.selectbox(\n        \"S\u00e9lectionner un genre\",\n        [\"Tous\", \"Male\", \"Female\"],\n        index=[\"Tous\", \"Male\", \"Female\"].index(\n            st.session_state.get(\"selected_gender\", \"Tous\")\n        ),\n        key=\"selected_gender\",\n    )\n\n    selected_stroke = col2.selectbox(\n        \"S\u00e9lectionner si AVC\",\n        [\"Tous\", \"Oui\", \"Non\"],\n        index=[\"Tous\", \"Oui\", \"Non\"].index(\n            st.session_state.get(\"selected_stroke\", \"Tous\")\n        ),\n        key=\"selected_stroke\",\n    )\n\n    selected_age = col3.slider(\n        \"Tranche d'\u00e2ge\",\n        0,\n        100,\n        value=st.session_state.get(\"selected_age\", (30, 70)),\n        key=\"selected_age\",\n    )\n\n    # Conversion filtres\n    gender = None if selected_gender == \"Tous\" else selected_gender\n    stroke = (\n        None if selected_stroke == \"Tous\" else {\"Oui\": 1, \"Non\": 0}[selected_stroke]\n    )\n    min_age, max_age = selected_age\n\n    # R\u00e9cup\u00e9ration patients filtr\u00e9s\n    if patient_id:\n        try:\n            patient_id_int = int(patient_id)\n            patients_data = [\n                p for p in filter_patient() if p.get(\"id\") == patient_id_int\n            ]\n            if not patients_data:\n                st.warning(\"Patient non trouv\u00e9.\")\n        except ValueError:\n            st.error(\"ID invalide.\")\n            patients_data = []\n    else:\n        patients_data = filter_patient(\n            gender=gender, stroke=stroke, min_age=min_age, max_age=max_age\n        )\n\n    st.session_state[\"patients_data\"] = patients_data\n\n    # Affichage\n    if not patients_data:\n        st.warning(\"Aucun patient ne correspond aux crit\u00e8res.\")\n    else:\n        st.dataframe(patients_data)\n        st.markdown(f\"**{len(patients_data)} patients trouv\u00e9s**\")\n</code></pre>"},{"location":"streamlit/modules/#streamlit_app.modules.donnees.fetch_patient_by_id","title":"<code>fetch_patient_by_id(patient_id)</code>","text":"<p>R\u00e9cup\u00e8re les informations d\u2019un patient sp\u00e9cifique depuis l\u2019API \u00e0 partir de son identifiant.</p> <p>Effectue une requ\u00eate GET vers l\u2019endpoint <code>/patients/{patient_id}</code> de l\u2019API d\u00e9finie par <code>API_URL</code>. - Si la requ\u00eate r\u00e9ussit, retourne les donn\u00e9es JSON du patient. - Si l\u2019identifiant n\u2019existe pas (404), un avertissement est affich\u00e9 dans Streamlit   et la fonction retourne <code>None</code>. - En cas d\u2019autres erreurs (connexion, statut HTTP invalide, etc.), un message d\u2019erreur   est affich\u00e9 et la fonction retourne <code>None</code>.</p>"},{"location":"streamlit/modules/#streamlit_app.modules.donnees.fetch_patient_by_id--parameters","title":"Parameters","text":"<p>patient_id : str | int     Identifiant unique du patient \u00e0 r\u00e9cup\u00e9rer.</p>"},{"location":"streamlit/modules/#streamlit_app.modules.donnees.fetch_patient_by_id--returns","title":"Returns","text":"<p>dict | None     Un dictionnaire contenant les informations du patient si la requ\u00eate r\u00e9ussit,     sinon <code>None</code> en cas d\u2019erreur ou si le patient n\u2019existe pas.</p> Source code in <code>streamlit_app/modules/donnees.py</code> <pre><code>def fetch_patient_by_id(patient_id):\n    \"\"\"\n    R\u00e9cup\u00e8re les informations d\u2019un patient sp\u00e9cifique depuis l\u2019API \u00e0 partir de son identifiant.\n\n    Effectue une requ\u00eate GET vers l\u2019endpoint `/patients/{patient_id}` de l\u2019API d\u00e9finie\n    par `API_URL`.\n    - Si la requ\u00eate r\u00e9ussit, retourne les donn\u00e9es JSON du patient.\n    - Si l\u2019identifiant n\u2019existe pas (404), un avertissement est affich\u00e9 dans Streamlit\n      et la fonction retourne `None`.\n    - En cas d\u2019autres erreurs (connexion, statut HTTP invalide, etc.), un message d\u2019erreur\n      est affich\u00e9 et la fonction retourne `None`.\n\n    Parameters\n    ----------\n    patient_id : str | int\n        Identifiant unique du patient \u00e0 r\u00e9cup\u00e9rer.\n\n    Returns\n    -------\n    dict | None\n        Un dictionnaire contenant les informations du patient si la requ\u00eate r\u00e9ussit,\n        sinon `None` en cas d\u2019erreur ou si le patient n\u2019existe pas.\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}/patients/{patient_id}\")\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.HTTPError as e:\n        if e.response.status_code == 404:\n            st.warning(\"Patient non trouv\u00e9.\")\n        else:\n            st.error(f\"Erreur API : {e}\")\n        return None\n    except Exception as e:\n        st.error(f\"Erreur API : {e}\")\n        return None\n</code></pre>"},{"location":"streamlit/modules/#streamlit_app.modules.donnees.fetch_patients","title":"<code>fetch_patients(gender=None, stroke=None, min_age=0, max_age=100)</code>","text":"<p>R\u00e9cup\u00e8re la liste des patients depuis l'API avec des filtres optionnels.</p> <p>Effectue une requ\u00eate GET vers l'endpoint <code>/patients/</code> de l'API d\u00e9finie par <code>API_URL</code>, en passant des param\u00e8tres de filtrage tels que le sexe, la pr\u00e9sence d'AVC et une plage d'\u00e2ge. Si la requ\u00eate r\u00e9ussit, retourne les donn\u00e9es JSON. En cas d'erreur ou si l'API renvoie un message d'information, retourne une liste vide.</p>"},{"location":"streamlit/modules/#streamlit_app.modules.donnees.fetch_patients--parameters","title":"Parameters","text":"<p>gender : str, optional     Sexe du patient \u00e0 filtrer (<code>\"Male\"</code>, <code>\"Female\"</code>, <code>\"Other\"</code>).     Par d\u00e9faut : <code>None</code> (pas de filtre). stroke : int | bool, optional     Indicateur de pr\u00e9sence d'AVC (<code>1</code> ou <code>True</code> = AVC, <code>0</code> ou <code>False</code> = pas d'AVC).     Par d\u00e9faut : <code>None</code> (pas de filtre). min_age : int, optional     \u00c2ge minimum des patients \u00e0 r\u00e9cup\u00e9rer.     Par d\u00e9faut : <code>0</code>. max_age : int, optional     \u00c2ge maximum des patients \u00e0 r\u00e9cup\u00e9rer.     Par d\u00e9faut : <code>100</code>.</p>"},{"location":"streamlit/modules/#streamlit_app.modules.donnees.fetch_patients--returns","title":"Returns","text":"<p>list     Liste de dictionnaires repr\u00e9sentant les patients filtr\u00e9s.     Retourne <code>[]</code> si aucun patient ne correspond ou en cas d'erreur.</p> Source code in <code>streamlit_app/modules/donnees.py</code> <pre><code>def fetch_patients(gender=None, stroke=None, min_age=0, max_age=100):\n    \"\"\"\n    R\u00e9cup\u00e8re la liste des patients depuis l'API avec des filtres optionnels.\n\n    Effectue une requ\u00eate GET vers l'endpoint `/patients/` de l'API d\u00e9finie par `API_URL`,\n    en passant des param\u00e8tres de filtrage tels que le sexe, la pr\u00e9sence d'AVC et une\n    plage d'\u00e2ge. Si la requ\u00eate r\u00e9ussit, retourne les donn\u00e9es JSON.\n    En cas d'erreur ou si l'API renvoie un message d'information, retourne une liste vide.\n\n    Parameters\n    ----------\n    gender : str, optional\n        Sexe du patient \u00e0 filtrer (`\"Male\"`, `\"Female\"`, `\"Other\"`).\n        Par d\u00e9faut : `None` (pas de filtre).\n    stroke : int | bool, optional\n        Indicateur de pr\u00e9sence d'AVC (`1` ou `True` = AVC, `0` ou `False` = pas d'AVC).\n        Par d\u00e9faut : `None` (pas de filtre).\n    min_age : int, optional\n        \u00c2ge minimum des patients \u00e0 r\u00e9cup\u00e9rer.\n        Par d\u00e9faut : `0`.\n    max_age : int, optional\n        \u00c2ge maximum des patients \u00e0 r\u00e9cup\u00e9rer.\n        Par d\u00e9faut : `100`.\n\n    Returns\n    -------\n    list\n        Liste de dictionnaires repr\u00e9sentant les patients filtr\u00e9s.\n        Retourne `[]` si aucun patient ne correspond ou en cas d'erreur.\n\n    \"\"\"\n    params = {\n        \"gender\": gender,\n        \"stroke\": stroke,\n        \"min_age\": min_age,\n        \"max_age\": max_age,\n    }\n    try:\n        response = requests.get(f\"{API_URL}/patients/\", params=params)\n        response.raise_for_status()\n        data = response.json()\n        if \"message\" in data:\n            return []\n        return data\n    except Exception as e:\n        st.error(f\"Erreur API : {e}\")\n        return []\n</code></pre>"},{"location":"streamlit/modules/#visualisations","title":"Visualisations","text":""},{"location":"streamlit/modules/#streamlit_app.modules.visualisations.calc_avc_maladie_tabac","title":"<code>calc_avc_maladie_tabac(patients)</code>","text":"<p>Calcule le taux d'AVC en fonction de la pr\u00e9sence de maladie cardiaque et du statut tabagique.</p> <p>Parameters:</p> Name Type Description Default <code>patients</code> <code>list of dict</code> <p>Liste de dictionnaires repr\u00e9sentant les patients. Chaque dictionnaire peut contenir les cl\u00e9s \"heart_disease\", \"smoking_status\" et \"stroke\".</p> required <p>Returns:</p> Type Description <code>int</code> <p>list of dict: Liste de dictionnaires avec les cl\u00e9s suivantes : - \"heart_disease\" : 0 ou 1 - \"smoking_status\" : statut du patient (\"Unknown\" si non renseign\u00e9) - \"stroke\" : pourcentage de patients ayant eu un AVC dans ce groupe</p> <p>Remarques : - Les r\u00e9sultats sont regroup\u00e9s par combinaison (maladie cardiaque, statut tabac). - La fonction utilise le caching de Streamlit (@st.cache_data) pour optimiser les performances.</p> Source code in <code>streamlit_app/modules/visualisations.py</code> <pre><code>@st.cache_data\ndef calc_avc_maladie_tabac(patients) -&gt; int:\n    \"\"\"\n    Calcule le taux d'AVC en fonction de la pr\u00e9sence de maladie cardiaque et du statut tabagique.\n\n    Args:\n        patients (list of dict): Liste de dictionnaires repr\u00e9sentant les patients.\n            Chaque dictionnaire peut contenir les cl\u00e9s \"heart_disease\", \"smoking_status\" et \"stroke\".\n\n    Returns:\n        list of dict: Liste de dictionnaires avec les cl\u00e9s suivantes :\n            - \"heart_disease\" : 0 ou 1\n            - \"smoking_status\" : statut du patient (\"Unknown\" si non renseign\u00e9)\n            - \"stroke\" : pourcentage de patients ayant eu un AVC dans ce groupe\n\n    Remarques :\n    - Les r\u00e9sultats sont regroup\u00e9s par combinaison (maladie cardiaque, statut tabac).\n    - La fonction utilise le caching de Streamlit (@st.cache_data) pour optimiser les performances.\n    \"\"\"\n\n    rate_data = {}\n    for p in patients:\n        key = (p.get(\"heart_disease\", 0), p.get(\"smoking_status\", \"Unknown\"))\n        if key not in rate_data:\n            rate_data[key] = {\"stroke_sum\": 0, \"count\": 0}\n        rate_data[key][\"stroke_sum\"] += p.get(\"stroke\", 0)\n        rate_data[key][\"count\"] += 1\n    return [\n        {\n            \"heart_disease\": k[0],\n            \"smoking_status\": k[1],\n            \"stroke\": v[\"stroke_sum\"] / v[\"count\"] * 100,\n        }\n        for k, v in rate_data.items()\n    ]\n</code></pre>"},{"location":"streamlit/modules/#streamlit_app.modules.visualisations.calc_avc_par_age","title":"<code>calc_avc_par_age(patients)</code>","text":"<p>Compte le nombre de patients ayant eu un AVC par \u00e2ge.</p> <p>Parameters:</p> Name Type Description Default <code>patients</code> <code>list of dict</code> <p>Liste de dictionnaires repr\u00e9sentant les patients. Chaque dictionnaire doit contenir les cl\u00e9s \"age\" et \"stroke\".</p> required <p>Returns:</p> Type Description <code>Counter</code> <p>collections.Counter: Compteur des AVC par \u00e2ge, uniquement pour les patients                  ayant eu un AVC (stroke == 1).</p> <p>Remarques : - Les \u00e2ges des patients sans AVC sont ignor\u00e9s. - La fonction utilise le caching de Streamlit (@st.cache_data) pour optimiser les performances.</p> Source code in <code>streamlit_app/modules/visualisations.py</code> <pre><code>@st.cache_data\ndef calc_avc_par_age(patients) -&gt; Counter:\n    \"\"\"\n    Compte le nombre de patients ayant eu un AVC par \u00e2ge.\n\n    Args:\n        patients (list of dict): Liste de dictionnaires repr\u00e9sentant les patients.\n            Chaque dictionnaire doit contenir les cl\u00e9s \"age\" et \"stroke\".\n\n    Returns:\n        collections.Counter: Compteur des AVC par \u00e2ge, uniquement pour les patients\n                             ayant eu un AVC (stroke == 1).\n\n    Remarques :\n    - Les \u00e2ges des patients sans AVC sont ignor\u00e9s.\n    - La fonction utilise le caching de Streamlit (@st.cache_data) pour optimiser les performances.\n    \"\"\"\n    return Counter(p[\"age\"] for p in patients if p.get(\"stroke\") == 1)\n</code></pre>"},{"location":"streamlit/modules/#streamlit_app.modules.visualisations.calc_avc_par_imc","title":"<code>calc_avc_par_imc(patients)</code>","text":"<p>Compte le nombre de patients ayant eu un AVC selon les cat\u00e9gories d'IMC.</p> <p>Parameters:</p> Name Type Description Default <code>patients</code> <code>list of dict</code> <p>Liste de dictionnaires repr\u00e9sentant les patients. Chaque dictionnaire doit contenir les cl\u00e9s \"bmi\" et \"stroke\".</p> required <p>Returns:</p> Type Description <code>Counter</code> <p>collections.Counter: Compteur des AVC par cat\u00e9gorie d'IMC : - \"Maigreur\" : IMC &lt; 18.5 - \"Normal\" : 18.5 &lt;= IMC &lt; 25 - \"Surpoids\" : 25 &lt;= IMC &lt; 30 - \"Ob\u00e9sit\u00e9 mod\u00e9r\u00e9e\" : 30 &lt;= IMC &lt; 35 - \"Ob\u00e9sit\u00e9 s\u00e9v\u00e8re\" : IMC &gt;= 35</p> <p>Remarques : - Seuls les patients ayant eu un AVC (stroke == 1) sont compt\u00e9s. - La fonction utilise le caching de Streamlit (@st.cache_data) pour optimiser les performances.</p> Source code in <code>streamlit_app/modules/visualisations.py</code> <pre><code>@st.cache_data\ndef calc_avc_par_imc(patients) -&gt; Counter:\n    \"\"\"\n    Compte le nombre de patients ayant eu un AVC selon les cat\u00e9gories d'IMC.\n\n    Args:\n        patients (list of dict): Liste de dictionnaires repr\u00e9sentant les patients.\n            Chaque dictionnaire doit contenir les cl\u00e9s \"bmi\" et \"stroke\".\n\n    Returns:\n        collections.Counter: Compteur des AVC par cat\u00e9gorie d'IMC :\n            - \"Maigreur\" : IMC &lt; 18.5\n            - \"Normal\" : 18.5 &lt;= IMC &lt; 25\n            - \"Surpoids\" : 25 &lt;= IMC &lt; 30\n            - \"Ob\u00e9sit\u00e9 mod\u00e9r\u00e9e\" : 30 &lt;= IMC &lt; 35\n            - \"Ob\u00e9sit\u00e9 s\u00e9v\u00e8re\" : IMC &gt;= 35\n\n    Remarques :\n    - Seuls les patients ayant eu un AVC (stroke == 1) sont compt\u00e9s.\n    - La fonction utilise le caching de Streamlit (@st.cache_data) pour optimiser les performances.\n    \"\"\"\n\n    def imc_bin(bmi):\n        if bmi &lt; 18.5:\n            return \"Maigreur\"\n        elif bmi &lt; 25:\n            return \"Normal\"\n        elif bmi &lt; 30:\n            return \"Surpoids\"\n        elif bmi &lt; 35:\n            return \"Ob\u00e9sit\u00e9 mod\u00e9r\u00e9e\"\n        else:\n            return \"Ob\u00e9sit\u00e9 s\u00e9v\u00e8re\"\n\n    return Counter(imc_bin(p.get(\"bmi\", 0)) for p in patients if p.get(\"stroke\") == 1)\n</code></pre>"},{"location":"streamlit/modules/#streamlit_app.modules.visualisations.calc_taux_avc","title":"<code>calc_taux_avc(patients)</code>","text":"<p>Calcule le taux d'AVC par genre \u00e0 partir d'une liste de patients.</p> <p>Parameters:</p> Name Type Description Default <code>patients</code> <code>list of dict</code> <p>Liste de dictionnaires repr\u00e9sentant les patients. Chaque dictionnaire peut contenir les cl\u00e9s \"gender\" et \"stroke\".</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Un dictionnaire o\u00f9 chaque cl\u00e9 est un genre (\"Male\", \"Female\", etc.)   et chaque valeur est le pourcentage de patients ayant eu un AVC pour ce genre.</p> <p>Remarques : - La fonction utilise le caching de Streamlit (@st.cache_data) pour optimiser les performances. - Si le genre d'un patient n'est pas renseign\u00e9, \"Unknown\" est utilis\u00e9.</p> Source code in <code>streamlit_app/modules/visualisations.py</code> <pre><code>@st.cache_data\ndef calc_taux_avc(patients) -&gt; dict:\n    \"\"\"\n    Calcule le taux d'AVC par genre \u00e0 partir d'une liste de patients.\n\n    Args:\n        patients (list of dict): Liste de dictionnaires repr\u00e9sentant les patients.\n            Chaque dictionnaire peut contenir les cl\u00e9s \"gender\" et \"stroke\".\n\n    Returns:\n        dict: Un dictionnaire o\u00f9 chaque cl\u00e9 est un genre (\"Male\", \"Female\", etc.)\n              et chaque valeur est le pourcentage de patients ayant eu un AVC pour ce genre.\n\n    Remarques :\n    - La fonction utilise le caching de Streamlit (@st.cache_data) pour optimiser les performances.\n    - Si le genre d'un patient n'est pas renseign\u00e9, \"Unknown\" est utilis\u00e9.\n    \"\"\"\n\n    compteur, total = {}, {}\n    for p in patients:\n        g = p.get(\"gender\", \"Unknown\")\n        compteur[g] = compteur.get(g, 0) + p.get(\"stroke\", 0)\n        total[g] = total.get(g, 0) + 1\n    return {g: compteur[g] / total[g] * 100 for g in compteur}\n</code></pre>"},{"location":"streamlit/modules/#streamlit_app.modules.visualisations.visualisations","title":"<code>visualisations()</code>","text":"<p>Affiche les visualisations statistiques des donn\u00e9es patients dans l'application Streamlit.</p> <p>Fonctionnalit\u00e9s principales : - V\u00e9rifie que des patients ont \u00e9t\u00e9 s\u00e9lectionn\u00e9s dans <code>st.session_state[\"patients_data\"]</code>. - Cr\u00e9e quatre visualisations avec Plotly :     1. Taux d'AVC par genre (bar chart)     2. Nombre d'AVC par \u00e2ge (bar chart)     3. R\u00e9partition des AVC selon les cat\u00e9gories d'IMC (pie chart)     4. Taux d'AVC selon la pr\u00e9sence de maladie cardiaque et le statut tabagique (bar chart group\u00e9) - Affiche les graphiques directement dans l'application Streamlit. - Si aucun patient n'est s\u00e9lectionn\u00e9, affiche un message d'information.</p> <p>Remarques : - Les calculs utilisent les fonctions <code>calc_taux_avc</code>, <code>calc_avc_par_age</code>,   <code>calc_avc_par_imc</code> et <code>calc_avc_maladie_tabac</code> avec caching pour optimiser les performances. - Les graphiques sont interactifs gr\u00e2ce \u00e0 Plotly.</p> Source code in <code>streamlit_app/modules/visualisations.py</code> <pre><code>def visualisations():\n    \"\"\"\n    Affiche les visualisations statistiques des donn\u00e9es patients dans l'application Streamlit.\n\n    Fonctionnalit\u00e9s principales :\n    - V\u00e9rifie que des patients ont \u00e9t\u00e9 s\u00e9lectionn\u00e9s dans `st.session_state[\"patients_data\"]`.\n    - Cr\u00e9e quatre visualisations avec Plotly :\n        1. Taux d'AVC par genre (bar chart)\n        2. Nombre d'AVC par \u00e2ge (bar chart)\n        3. R\u00e9partition des AVC selon les cat\u00e9gories d'IMC (pie chart)\n        4. Taux d'AVC selon la pr\u00e9sence de maladie cardiaque et le statut tabagique (bar chart group\u00e9)\n    - Affiche les graphiques directement dans l'application Streamlit.\n    - Si aucun patient n'est s\u00e9lectionn\u00e9, affiche un message d'information.\n\n    Remarques :\n    - Les calculs utilisent les fonctions `calc_taux_avc`, `calc_avc_par_age`,\n      `calc_avc_par_imc` et `calc_avc_maladie_tabac` avec caching pour optimiser les performances.\n    - Les graphiques sont interactifs gr\u00e2ce \u00e0 Plotly.\n    \"\"\"\n\n    st.header(\"Visualisations\")\n    patients_data = st.session_state.get(\"patients_data\", [])\n    if not patients_data:\n        st.info(\"Veuillez d'abord s\u00e9lectionner des patients dans l'onglet Donn\u00e9es.\")\n        return\n\n    # --- 1. Taux d'AVC par genre (bar chart horizontal)\n    taux_avc = calc_taux_avc(patients_data)\n    fig1 = px.bar(\n        {\"Genre\": list(taux_avc.keys()), \"Taux d'AVC (%)\": list(taux_avc.values())},\n        x=\"Taux d'AVC (%)\",\n        y=\"Genre\",\n        orientation=\"h\",\n        text=[round(v, 1) for v in taux_avc.values()],\n        title=\"Taux d'AVC par genre\",\n    )\n    fig1.update_traces(textposition=\"outside\")\n    st.plotly_chart(fig1)\n\n    # --- 2. Nombre d'AVC par \u00e2ge (histogramme)\n    ages = [p[\"age\"] for p in patients_data if p.get(\"stroke\") == 1]\n    fig2 = px.histogram(\n        ages,\n        nbins=20,\n        labels={\"value\": \"\u00c2ge\", \"count\": \"Nombre d'AVC\"},\n        title=\"Distribution des AVC par \u00e2ge\",\n    )\n    st.plotly_chart(fig2)\n\n    # --- 3. R\u00e9partition des AVC selon IMC (bar chart)\n    imc_count = calc_avc_par_imc(patients_data)\n    fig3 = px.bar(\n        {\n            \"Cat\u00e9gorie IMC\": list(imc_count.keys()),\n            \"Nombre d'AVC\": list(imc_count.values()),\n        },\n        x=\"Cat\u00e9gorie IMC\",\n        y=\"Nombre d'AVC\",\n        text=[v for v in imc_count.values()],\n        title=\"R\u00e9partition des AVC selon IMC\",\n        color=\"Cat\u00e9gorie IMC\",\n        color_discrete_sequence=px.colors.qualitative.Pastel,\n    )\n    fig3.update_traces(textposition=\"outside\")\n    st.plotly_chart(fig3)\n\n    # --- 4. AVC selon maladie cardiaque et tabac (heatmap)\n    rate_list = calc_avc_maladie_tabac(patients_data)\n\n    # Pr\u00e9parer les axes et la matrice des valeurs\n    smoking_statuses = sorted(list(set(d[\"smoking_status\"] for d in rate_list)))\n    heart_diseases = [0, 1]  # 0 = pas de maladie cardiaque, 1 = maladie cardiaque\n    z_matrix = []\n\n    for hd in heart_diseases:\n        row = []\n        for ss in smoking_statuses:\n            # Chercher le taux correspondant\n            val = next(\n                (\n                    d[\"stroke\"]\n                    for d in rate_list\n                    if d[\"heart_disease\"] == hd and d[\"smoking_status\"] == ss\n                ),\n                0,\n            )\n            row.append(val)\n        z_matrix.append(row)\n\n    fig4 = px.imshow(\n        z_matrix,\n        x=smoking_statuses,\n        y=[\"Sans maladie cardiaque\", \"Avec maladie cardiaque\"],\n        labels={\n            \"x\": \"Statut fumeur\",\n            \"y\": \"Maladie cardiaque\",\n            \"color\": \"Taux d'AVC (%)\",\n        },\n        color_continuous_scale=\"Reds\",\n        text_auto=True,\n        title=\"Taux d'AVC selon maladie cardiaque et statut tabac\",\n    )\n\n    st.plotly_chart(fig4)\n\n    # --- 5. Scatter IMC vs \u00c2ge pour AVC avec 2 couleurs distinctes\n    scatter_data = [p for p in patients_data if p.get(\"stroke\") == 1]\n    fig5 = px.scatter(\n        scatter_data,\n        x=\"age\",\n        y=\"bmi\",\n        color=\"gender\",\n        color_discrete_map={\"Male\": \"blue\", \"Female\": \"red\", \"Unknown\": \"gray\"},\n        labels={\"age\": \"\u00c2ge\", \"bmi\": \"IMC\", \"gender\": \"Genre\"},\n        title=\"IMC vs \u00c2ge des patients ayant eu un AVC\",\n        hover_data=[\"stroke\"],\n    )\n    st.plotly_chart(fig5)\n</code></pre>"},{"location":"streamlit/modules/#statistiques","title":"Statistiques","text":""},{"location":"streamlit/modules/#streamlit_app.modules.statistiques.fetch_stats","title":"<code>fetch_stats()</code>","text":"<p>R\u00e9cup\u00e8re les statistiques depuis l'API et retourne les donn\u00e9es au format JSON.</p> <p>Effectue une requ\u00eate GET vers l'endpoint <code>/stats/</code> de l'API d\u00e9finie par <code>API_URL</code>. Si la requ\u00eate est r\u00e9ussie, la r\u00e9ponse est convertie en dictionnaire Python via <code>response.json()</code>. En cas d'erreur (connexion, statut HTTP invalide, etc.), un message d'erreur est affich\u00e9 dans Streamlit et la fonction retourne <code>None</code>.</p>"},{"location":"streamlit/modules/#streamlit_app.modules.statistiques.fetch_stats--returns","title":"Returns","text":"<p>dict | None     Un dictionnaire contenant les statistiques si la requ\u00eate r\u00e9ussit,     sinon <code>None</code> en cas d'erreur.</p> Source code in <code>streamlit_app/modules/statistiques.py</code> <pre><code>def fetch_stats():\n    \"\"\"\n    R\u00e9cup\u00e8re les statistiques depuis l'API et retourne les donn\u00e9es au format JSON.\n\n    Effectue une requ\u00eate GET vers l'endpoint `/stats/` de l'API d\u00e9finie par `API_URL`.\n    Si la requ\u00eate est r\u00e9ussie, la r\u00e9ponse est convertie en dictionnaire Python via `response.json()`.\n    En cas d'erreur (connexion, statut HTTP invalide, etc.), un message d'erreur est affich\u00e9\n    dans Streamlit et la fonction retourne `None`.\n\n    Returns\n    -------\n    dict | None\n        Un dictionnaire contenant les statistiques si la requ\u00eate r\u00e9ussit,\n        sinon `None` en cas d'erreur.\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}/stats/\")\n        response.raise_for_status()\n        return response.json()\n    except Exception as e:\n        st.error(f\"Erreur API : {e}\")\n        return None\n</code></pre>"},{"location":"streamlit/modules/#streamlit_app.modules.statistiques.statistiques","title":"<code>statistiques()</code>","text":"<p>Affiche les statistiques globales des patients dans l'application Streamlit.</p> <p>Fonctionnalit\u00e9s principales : - R\u00e9cup\u00e8re tous les patients via la fonction <code>filter_patient()</code>. - Calcule et affiche :     - Le nombre total de patients     - Le nombre d'hommes et de femmes     - Le nombre de patients ayant eu un AVC     - Le nombre de patients n'ayant pas eu d'AVC     - L'\u00e2ge moyen des patients - Affiche les statistiques sous forme de tableau Streamlit (<code>st.dataframe</code>).</p> <p>Remarques : - La fonction ne prend pas d'arguments et ne retourne pas de valeur. - Les calculs sont r\u00e9alis\u00e9s sur l'ensemble des patients sans filtrage pr\u00e9alable. - Les genres sont consid\u00e9r\u00e9s comme \"male\" ou \"female\" (insensible \u00e0 la casse).</p> Source code in <code>streamlit_app/modules/statistiques.py</code> <pre><code>def statistiques():\n    \"\"\"\n    Affiche les statistiques globales des patients dans l'application Streamlit.\n\n    Fonctionnalit\u00e9s principales :\n    - R\u00e9cup\u00e8re tous les patients via la fonction `filter_patient()`.\n    - Calcule et affiche :\n        - Le nombre total de patients\n        - Le nombre d'hommes et de femmes\n        - Le nombre de patients ayant eu un AVC\n        - Le nombre de patients n'ayant pas eu d'AVC\n        - L'\u00e2ge moyen des patients\n    - Affiche les statistiques sous forme de tableau Streamlit (`st.dataframe`).\n\n    Remarques :\n    - La fonction ne prend pas d'arguments et ne retourne pas de valeur.\n    - Les calculs sont r\u00e9alis\u00e9s sur l'ensemble des patients sans filtrage pr\u00e9alable.\n    - Les genres sont consid\u00e9r\u00e9s comme \"male\" ou \"female\" (insensible \u00e0 la casse).\n    \"\"\"\n\n    st.header(\"Statistiques\")\n    patients_all = filter_patient()\n    total_patients = len(patients_all)\n\n    # Compteurs AVC\n    stroke_true = sum(p[\"stroke\"] for p in patients_all)\n    stroke_false = total_patients - stroke_true\n\n    # \u00c2ge moyen\n    avg_age = (\n        round(sum(p[\"age\"] for p in patients_all) / total_patients, 2)\n        if total_patients\n        else 0\n    )\n\n    # Compteurs par genre\n    nb_hommes = sum(1 for p in patients_all if p[\"gender\"].lower() == \"male\")\n    nb_femmes = sum(1 for p in patients_all if p[\"gender\"].lower() == \"female\")\n\n    rows = [\n        (\"Total patients\", total_patients),\n        (\"Hommes\", nb_hommes),\n        (\"Femmes\", nb_femmes),\n        (\"Patients avec AVC\", stroke_true),\n        (\"Patients sans AVC\", stroke_false),\n        (\"\u00c2ge moyen\", avg_age),\n    ]\n\n    stats_df = pd.DataFrame(rows, columns=[\"Statistique\", \"Valeur\"])\n    st.dataframe(stats_df)\n</code></pre>"},{"location":"streamlit/utils/","title":"Utils Streamlit","text":""},{"location":"streamlit/utils/#data-utils","title":"Data Utils","text":""},{"location":"streamlit/utils/#streamlit_app.utils.data_utils.get_patients","title":"<code>get_patients(gender=None, stroke=None, min_age=0, max_age=100)</code>","text":"<p>R\u00e9cup\u00e8re et filtre les patients en utilisant la fonction <code>filter_patient</code> avec mise en cache.</p> <p>Cette fonction agit comme un wrapper autour de <code>filter_patient</code> et applique les filtres sur le genre, la pr\u00e9sence d'AVC et la tranche d'\u00e2ge. Les r\u00e9sultats sont mis en cache par Streamlit pour am\u00e9liorer les performances et \u00e9viter des appels r\u00e9p\u00e9titifs co\u00fbteux.</p>"},{"location":"streamlit/utils/#streamlit_app.utils.data_utils.get_patients--parameters","title":"Parameters","text":"<p>gender : str, optional     Sexe des patients \u00e0 filtrer (<code>\"Male\"</code>, <code>\"Female\"</code>, <code>\"Other\"</code>).     Par d\u00e9faut : <code>None</code> (pas de filtre). stroke : int | bool, optional     Indicateur de pr\u00e9sence d'AVC (<code>1</code> ou <code>True</code> = AVC, <code>0</code> ou <code>False</code> = pas d'AVC).     Par d\u00e9faut : <code>None</code> (pas de filtre). min_age : int, optional     \u00c2ge minimum des patients \u00e0 r\u00e9cup\u00e9rer.     Par d\u00e9faut : <code>0</code>. max_age : int, optional     \u00c2ge maximum des patients \u00e0 r\u00e9cup\u00e9rer.     Par d\u00e9faut : <code>100</code>.</p>"},{"location":"streamlit/utils/#streamlit_app.utils.data_utils.get_patients--returns","title":"Returns","text":"<p>list     Liste de dictionnaires repr\u00e9sentant les patients filtr\u00e9s.</p>"},{"location":"streamlit/utils/#streamlit_app.utils.data_utils.get_patients--notes","title":"Notes","text":"<ul> <li>La mise en cache <code>@st.cache_data</code> permet de r\u00e9utiliser les r\u00e9sultats pr\u00e9c\u00e9demment calcul\u00e9s   tant que les param\u00e8tres n'ont pas chang\u00e9.</li> </ul> Source code in <code>streamlit_app/utils/data_utils.py</code> <pre><code>@st.cache_data\ndef get_patients(gender=None, stroke=None, min_age=0, max_age=100):\n    \"\"\"\n    R\u00e9cup\u00e8re et filtre les patients en utilisant la fonction `filter_patient` avec mise en cache.\n\n    Cette fonction agit comme un wrapper autour de `filter_patient` et applique les filtres\n    sur le genre, la pr\u00e9sence d'AVC et la tranche d'\u00e2ge.\n    Les r\u00e9sultats sont mis en cache par Streamlit pour am\u00e9liorer les performances et \u00e9viter\n    des appels r\u00e9p\u00e9titifs co\u00fbteux.\n\n    Parameters\n    ----------\n    gender : str, optional\n        Sexe des patients \u00e0 filtrer (`\"Male\"`, `\"Female\"`, `\"Other\"`).\n        Par d\u00e9faut : `None` (pas de filtre).\n    stroke : int | bool, optional\n        Indicateur de pr\u00e9sence d'AVC (`1` ou `True` = AVC, `0` ou `False` = pas d'AVC).\n        Par d\u00e9faut : `None` (pas de filtre).\n    min_age : int, optional\n        \u00c2ge minimum des patients \u00e0 r\u00e9cup\u00e9rer.\n        Par d\u00e9faut : `0`.\n    max_age : int, optional\n        \u00c2ge maximum des patients \u00e0 r\u00e9cup\u00e9rer.\n        Par d\u00e9faut : `100`.\n\n    Returns\n    -------\n    list\n        Liste de dictionnaires repr\u00e9sentant les patients filtr\u00e9s.\n\n    Notes\n    -----\n    - La mise en cache `@st.cache_data` permet de r\u00e9utiliser les r\u00e9sultats pr\u00e9c\u00e9demment calcul\u00e9s\n      tant que les param\u00e8tres n'ont pas chang\u00e9.\n    \"\"\"\n    return filter_patient(\n        gender=gender, stroke=stroke, min_age=min_age, max_age=max_age\n    )\n</code></pre>"},{"location":"streamlit/utils/#stats-utils","title":"Stats Utils","text":""},{"location":"streamlit/utils/#streamlit_app.utils.stats_utils.get_global_stats","title":"<code>get_global_stats(patients_all)</code>","text":"<p>Calcule et retourne des statistiques globales \u00e0 partir d'une liste de patients.</p> <p>Cette fonction analyse les donn\u00e9es d'une liste de patients et calcule : - le nombre total de patients, - le nombre d'hommes et de femmes, - le nombre de patients ayant eu un AVC et ceux n'en ayant pas eu, - l'\u00e2ge moyen des patients.</p>"},{"location":"streamlit/utils/#streamlit_app.utils.stats_utils.get_global_stats--parameters","title":"Parameters","text":"<p>patients_all : list of dict     Liste de dictionnaires repr\u00e9sentant les patients. Chaque dictionnaire doit     contenir au moins les cl\u00e9s <code>\"age\"</code>, <code>\"gender\"</code> et <code>\"stroke\"</code>.</p>"},{"location":"streamlit/utils/#streamlit_app.utils.stats_utils.get_global_stats--returns","title":"Returns","text":"<p>pd.DataFrame     DataFrame Pandas contenant les statistiques globales avec deux colonnes :     <code>\"Statistique\"</code> et <code>\"Valeur\"</code>.</p>"},{"location":"streamlit/utils/#streamlit_app.utils.stats_utils.get_global_stats--examples","title":"Examples","text":"<p>patients = [ ...     {\"age\": 60, \"gender\": \"Male\", \"stroke\": 1}, ...     {\"age\": 45, \"gender\": \"Female\", \"stroke\": 0} ... ] get_global_stats(patients)             Statistique  Valeur 0       Total patients    2 1                Hommes    1 2               Femmes    1 3     Patients avec AVC    1 4  Patients sans AVC    1 5             \u00c2ge moyen   52.5</p> Source code in <code>streamlit_app/utils/stats_utils.py</code> <pre><code>def get_global_stats(patients_all):\n    \"\"\"\n    Calcule et retourne des statistiques globales \u00e0 partir d'une liste de patients.\n\n    Cette fonction analyse les donn\u00e9es d'une liste de patients et calcule :\n    - le nombre total de patients,\n    - le nombre d'hommes et de femmes,\n    - le nombre de patients ayant eu un AVC et ceux n'en ayant pas eu,\n    - l'\u00e2ge moyen des patients.\n\n    Parameters\n    ----------\n    patients_all : list of dict\n        Liste de dictionnaires repr\u00e9sentant les patients. Chaque dictionnaire doit\n        contenir au moins les cl\u00e9s `\"age\"`, `\"gender\"` et `\"stroke\"`.\n\n    Returns\n    -------\n    pd.DataFrame\n        DataFrame Pandas contenant les statistiques globales avec deux colonnes :\n        `\"Statistique\"` et `\"Valeur\"`.\n\n    Examples\n    --------\n    &gt;&gt;&gt; patients = [\n    ...     {\"age\": 60, \"gender\": \"Male\", \"stroke\": 1},\n    ...     {\"age\": 45, \"gender\": \"Female\", \"stroke\": 0}\n    ... ]\n    &gt;&gt;&gt; get_global_stats(patients)\n                Statistique  Valeur\n    0       Total patients    2\n    1                Hommes    1\n    2               Femmes    1\n    3     Patients avec AVC    1\n    4  Patients sans AVC    1\n    5             \u00c2ge moyen   52.5\n    \"\"\"\n    total_patients = len(patients_all)\n    stroke_true = sum(p[\"stroke\"] for p in patients_all)\n    stroke_false = total_patients - stroke_true\n    avg_age = (\n        round(sum(p[\"age\"] for p in patients_all) / total_patients, 2)\n        if total_patients\n        else 0\n    )\n    nb_hommes = sum(1 for p in patients_all if p[\"gender\"].lower() == \"male\")\n    nb_femmes = sum(1 for p in patients_all if p[\"gender\"].lower() == \"female\")\n\n    rows = [\n        (\"Total patients\", total_patients),\n        (\"Hommes\", nb_hommes),\n        (\"Femmes\", nb_femmes),\n        (\"Patients avec AVC\", stroke_true),\n        (\"Patients sans AVC\", stroke_false),\n        (\"\u00c2ge moyen\", avg_age),\n    ]\n    return pd.DataFrame(rows, columns=[\"Statistique\", \"Valeur\"])\n</code></pre>"},{"location":"streamlit/utils/#viz-utils","title":"Viz Utils","text":""},{"location":"streamlit/utils/#streamlit_app.utils.viz_utils.plot_taux_avc","title":"<code>plot_taux_avc(patients)</code>","text":"<p>Cr\u00e9e un graphique en barres repr\u00e9sentant le taux d'AVC par genre.</p> <p>Parameters:</p> Name Type Description Default <code>patients</code> <code>list of dict</code> <p>Liste de dictionnaires repr\u00e9sentant les patients. Chaque dictionnaire peut contenir les cl\u00e9s \"gender\" et \"stroke\".</p> required <p>Returns:</p> Type Description <code>fig</code> <p>plotly.fig: Figure Plotly sous forme de bar chart, avec : - x : genres (\"Male\", \"Female\", \"Unknown\", etc.) - y : taux d'AVC (%) pour chaque genre - texte : pourcentage arrondi affich\u00e9 sur chaque barre - titre : \"Taux d'AVC par genre\"</p> <p>Remarques : - Si le genre d'un patient n'est pas renseign\u00e9, \"Unknown\" est utilis\u00e9. - Le taux d'AVC est calcul\u00e9 comme (nombre d'AVC / nombre total de patients du genre) * 100. - La fonction ne modifie pas <code>st.session_state</code>; elle se contente de renvoyer la figure Plotly.</p> Source code in <code>streamlit_app/utils/viz_utils.py</code> <pre><code>def plot_taux_avc(patients) -&gt; px.fig:\n    \"\"\"\n    Cr\u00e9e un graphique en barres repr\u00e9sentant le taux d'AVC par genre.\n\n    Args:\n        patients (list of dict): Liste de dictionnaires repr\u00e9sentant les patients.\n            Chaque dictionnaire peut contenir les cl\u00e9s \"gender\" et \"stroke\".\n\n    Returns:\n        plotly.fig: Figure Plotly sous forme de bar chart, avec :\n            - x : genres (\"Male\", \"Female\", \"Unknown\", etc.)\n            - y : taux d'AVC (%) pour chaque genre\n            - texte : pourcentage arrondi affich\u00e9 sur chaque barre\n            - titre : \"Taux d'AVC par genre\"\n\n    Remarques :\n    - Si le genre d'un patient n'est pas renseign\u00e9, \"Unknown\" est utilis\u00e9.\n    - Le taux d'AVC est calcul\u00e9 comme (nombre d'AVC / nombre total de patients du genre) * 100.\n    - La fonction ne modifie pas `st.session_state`; elle se contente de renvoyer la figure Plotly.\n    \"\"\"\n\n    compteur, total = {}, {}\n    for p in patients:\n        g = p.get(\"gender\", \"Unknown\")\n        compteur[g] = compteur.get(g, 0) + p.get(\"stroke\", 0)\n        total[g] = total.get(g, 0) + 1\n    taux = {g: compteur[g] / total[g] * 100 for g in compteur}\n    return px.bar(\n        x=list(taux.keys()),\n        y=list(taux.values()),\n        labels={\"x\": \"Genre\", \"y\": \"Taux d'AVC (%)\"},\n        text=[round(v, 1) for v in taux.values()],\n        title=\"Taux d'AVC par genre\",\n    )\n</code></pre>"}]}